{"version":3,"sources":["RenderClinicalTrials.tsx","index.tsx"],"names":["RenderClinicalTrials","props","trialsLines","createTrialsLines","trials","trialsWithIntersection","trialsWithoutIntersection","forEach","trial","index","currentTrials","findTrialToDelete","filter","t","end","start","title","isProcessed","concat","ttd","findIndex","j","splice","push","length","sort","c","b","sortTrials","trialsLine","line","numberOfIntersections","otherTrialsLines","reduce","n","otherTrialsLine","some","getNumberOfIntersections","_otherTrialsLine","otherLine","computeNumberOfIntersections","heightOfTrialsContainer","pixelForAMonth","className","map","trialsByLine","undefined","heightOfTrial","style","left","top","height","width","RenderTrials","items","i","yearDiv","toString","renderFooter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAqLeA,MApBf,SAA8BC,GAAkB,IAK1CC,EAvIN,SAASC,EAAkBC,EAAgBF,GACzC,IAAIG,EAAiC,GAC/BC,EAAoCF,EAyB1C,OAtBAE,EAA0BC,SAAQ,SAACC,EAAOC,EAAOC,GAC/C,IAAMC,EAAoBP,EAAOQ,QAC/B,SAACC,GAAD,OAAOL,EAAMM,IAAMD,EAAEE,OAASP,EAAMQ,QAAUH,EAAEG,QAAUH,EAAEI,eAG9DZ,EAAyBA,EAAuBa,OAAOP,GAEvDD,EAAcD,GAAOQ,aAAc,EAEnCN,EAAkBJ,SAAQ,SAACY,GACzB,IAAMC,EAAYhB,EAAOgB,WAAU,SAACC,GAAD,OAAOA,EAAEL,QAAUG,EAAIH,UACvC,IAAfI,GACFV,EAAcY,OAAOF,EAAW,SAKtClB,EAAYqB,KAAKjB,GAEbD,EAAuBmB,OAAS,IAClCtB,EAAcC,EAAkBE,EAAwBH,IAEnDA,EA4GWC,CApJpB,SAAoBC,GAClB,OAAOA,EAAOqB,MAAK,SAACC,EAAGC,GACrB,OAAID,EAAEX,MAAQY,EAAEZ,OACN,EAENW,EAAEX,MAAQY,EAAEZ,MACP,EAEF,KA0IYa,CAFF3B,EAAXG,QAI0C,IAOlD,OALAF,EAlFF,SAAsCA,GAapC,OAZAA,EAAYK,SAAQ,SAACsB,EAAYC,GAC/BD,EAAWtB,SAAQ,SAACC,EAAOC,EAAOC,GAChC,IAGMqB,EA9BZ,SACEvB,EACAwB,GAkBA,OAhB8BA,EAAiBC,QAC7C,SAACC,EAAGC,GAWF,OATEA,EAAgBC,MACd,SAACvB,GAAD,OACGL,EAAMO,MAAQF,EAAEE,OAASP,EAAMO,MAAQF,EAAEC,KACzCN,EAAMM,IAAMD,EAAEE,OAASP,EAAMM,IAAMD,EAAEC,KACrCN,EAAMO,MAAQF,EAAEE,OAASP,EAAMM,IAAMD,EAAEC,SAG5CoB,GAAK,GAEAA,IAET,GAYgCG,CAC5B7B,EAJuBN,EAAYU,QACnC,SAAC0B,EAAkBC,GAAnB,OAAiCA,IAAcT,MAMjDpB,EAAcD,GAAOsB,sBAAwBA,QAG1C7B,EAqEOsC,CAA6BtC,GAMzC,6BAjDJ,SACEA,EACAuC,EACAC,GAEA,OACE,yBAAKC,UAAU,UACZzC,EAAY0C,KAAI,SAACC,EAAcf,GAC9B,OAAOe,EAAaD,KAAI,SAACpC,GACvB,IAAMuB,OAC4Be,IAAhCtC,EAAMuB,sBACFvB,EAAMuB,sBACN,EACAgB,EACJN,GAA2BV,EAAwB,GACrD,OACE,yBACEY,UAAU,QACVK,MAAO,CACLC,KAAMP,EAAiBlC,EAAMO,MAC7BmC,IAAKH,EAAgBjB,EAErBqB,OAAQJ,EAAgB,EACxBK,OAAQ5C,EAAMM,IAAMN,EAAMO,OAAS2B,IAGpClC,EAAMQ,cAwBdqC,CAAanD,EAHc,IAFT,GAnEzB,SAAsBwC,GAGpB,IAFA,IAAMY,EAAQ,GAELC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAIC,EAAU,KAERP,EAAW,GAAJM,EAASb,EACZ,IAANa,GAAiB,IAANA,GAAiB,KAANA,IAExBC,EACE,yBAAKb,UAAU,UAAUK,MAAO,CAAEC,KAAMA,EAAO,KAA/C,KACKM,EAAEE,WAAWjC,OAAS,EAAI+B,EAA1B,WAAkCA,KAI3CD,EAAM/B,KAAK,yBAAKoB,UAAU,QAAQK,MAAO,CAAEC,WAC3CK,EAAM/B,KAAKiC,GAEb,OAAO,yBAAKb,UAAU,UAAUW,GAuD3BI,CANkB,KC1JzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAsBzD,OAbX,CACb,CAAEW,MAAO,GAAID,IAAK,IAAKE,MAAO,cAC9B,CAAED,MAAO,EAAGD,IAAK,GAAIE,MAAO,yBAC5B,CAAED,MAAO,GAAID,IAAK,IAAKE,MAAO,qBAC9B,CAAED,MAAO,GAAID,IAAK,GAAIE,MAAO,2BAW7B8C,SAASC,eAAe,W","file":"static/js/main.82d8cc65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./RenderClinicalTrials.css\";\n\ninterface Trial {\n  start: number;\n  end: number;\n  title: string;\n  isProcessed?: boolean;\n  numberOfIntersections?: number;\n}\n\ntype Trials = Array<Trial>;\n\ninterface AppProps {\n  trials: Trials;\n}\n\n// Sort trials by start key\nfunction sortTrials(trials: Trials) {\n  return trials.sort((c, b) => {\n    if (c.start < b.start) {\n      return -1;\n    }\n    if (c.start > b.start) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\n// Create lines with trials\nfunction createTrialsLines(trials: Trials, trialsLines: Array<Trials>) {\n  let trialsWithIntersection: Trials = [];\n  const trialsWithoutIntersection: Trials = trials;\n\n  // For each trial keep only trial without intersection and insert in the \"trialsLines\"\n  trialsWithoutIntersection.forEach((trial, index, currentTrials) => {\n    const findTrialToDelete = trials.filter(\n      (t) => trial.end > t.start && trial.title !== t.title && !t.isProcessed\n    );\n    // Keep in an array trials which an intersection\n    trialsWithIntersection = trialsWithIntersection.concat(findTrialToDelete);\n    // Set current trial to processed\n    currentTrials[index].isProcessed = true;\n    // Delete all trials which an intersection\n    findTrialToDelete.forEach((ttd) => {\n      const findIndex = trials.findIndex((j) => j.title === ttd.title);\n      if (findIndex !== -1) {\n        currentTrials.splice(findIndex, 1);\n      }\n    });\n  });\n  // Insert in lines array all trials without intersection\n  trialsLines.push(trialsWithoutIntersection);\n  // Continue to process the rest of the trials with an intersection\n  if (trialsWithIntersection.length > 0) {\n    trialsLines = createTrialsLines(trialsWithIntersection, trialsLines);\n  }\n  return trialsLines;\n}\n\n// Get number of intersections\nfunction getNumberOfIntersections(\n  trial: Trial,\n  otherTrialsLines: Array<Trials>\n) {\n  const numberOfIntersections = otherTrialsLines.reduce(\n    (n, otherTrialsLine) => {\n      if (\n        otherTrialsLine.some(\n          (t) =>\n            (trial.start > t.start && trial.start < t.end) ||\n            (trial.end > t.start && trial.end < t.end) ||\n            (trial.start < t.start && trial.end > t.end)\n        )\n      ) {\n        n += 1;\n      }\n      return n;\n    },\n    0\n  );\n  return numberOfIntersections;\n}\n\n// Compute height of each trials\nfunction computeNumberOfIntersections(trialsLines: Array<Trials>) {\n  trialsLines.forEach((trialsLine, line) => {\n    trialsLine.forEach((trial, index, currentTrials) => {\n      const otherTrialsLines = trialsLines.filter(\n        (_otherTrialsLine, otherLine) => otherLine !== line\n      );\n      const numberOfIntersections = getNumberOfIntersections(\n        trial,\n        otherTrialsLines\n      );\n      currentTrials[index].numberOfIntersections = numberOfIntersections;\n    });\n  });\n  return trialsLines;\n}\n\n// Create footer\nfunction renderFooter(pixelForAMonth: number) {\n  const items = [];\n\n  for (let i = 0; i < 11; i += 1) {\n    let yearDiv = null;\n    // One trait is a year so 12 months\n    const left = i * 12 * pixelForAMonth;\n    if (i === 0 || i === 5 || i === 10) {\n      // 19px is the half width of the yearDiv\n      yearDiv = (\n        <div className=\"yearDiv\" style={{ left: left - 19 }}>\n          20{i.toString().length > 1 ? i : `0${i}`}\n        </div>\n      );\n    }\n    items.push(<div className=\"trait\" style={{ left }} />);\n    items.push(yearDiv);\n  }\n  return <div className=\"footer\">{items}</div>;\n}\n\n// Create trials\nfunction RenderTrials(\n  trialsLines: Array<Trials>,\n  heightOfTrialsContainer: number,\n  pixelForAMonth: number\n) {\n  return (\n    <div className=\"trials\">\n      {trialsLines.map((trialsByLine, line) => {\n        return trialsByLine.map((trial) => {\n          const numberOfIntersections =\n            trial.numberOfIntersections !== undefined\n              ? trial.numberOfIntersections\n              : 1;\n          const heightOfTrial =\n            heightOfTrialsContainer / (numberOfIntersections + 1);\n          return (\n            <div\n              className=\"trial\"\n              style={{\n                left: pixelForAMonth * trial.start,\n                top: heightOfTrial * line,\n                // substract 2 pixels for border top and bottom\n                height: heightOfTrial - 2,\n                width: (trial.end - trial.start) * pixelForAMonth,\n              }}\n            >\n              {trial.title}\n            </div>\n          );\n        });\n      })}\n    </div>\n  );\n}\n\n// Main render\nfunction RenderClinicalTrials(props: AppProps) {\n  const { trials } = props;\n  // Sort trials\n  const sortedTrials = sortTrials(trials);\n  // Create each lines with trials\n  let trialsLines = createTrialsLines(sortedTrials, []);\n  // Compute intersections for each trials\n  trialsLines = computeNumberOfIntersections(trialsLines);\n  // 720 of the width divide by the number of month (120)\n  const pixelForAMonth = 6;\n  // Height of the container\n  const heightOfTrialsContainer = 250;\n  return (\n    <div>\n      {RenderTrials(trialsLines, heightOfTrialsContainer, pixelForAMonth)}\n      {renderFooter(pixelForAMonth)}\n    </div>\n  );\n}\n\nexport default RenderClinicalTrials;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport RenderClinicalTrials from \"./RenderClinicalTrials\";\n\nconst trials = [\n  { start: 90, end: 115, title: \"Bortezomib\" },\n  { start: 5, end: 50, title: \"Study of Bendamustine\" },\n  { start: 70, end: 100, title: \"Study of Stockolm\" },\n  { start: 55, end: 85, title: \"ASCT With Nivolumab\" },\n  // { start: 6, end: 20, title: \"B\" },\n  // { start: 8, end: 21, title: \"C\" },\n  // { start: 116, end: 130, title: \"D\" },\n  // { start: 110, end: 142, title: \"E\" },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <RenderClinicalTrials trials={trials} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}